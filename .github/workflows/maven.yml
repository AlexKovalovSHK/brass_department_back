name: Build and Deploy to Server

on:
  push:
    branches: [ "main" ]

env:
  DOCKER_IMAGE_NAME: brass_server  # Имя образа и .tar файла
  DEPLOY_DIR: /root/brass_server   # Директория для деплоя на сервере
  CONTAINER_NAME: brass_server     # Имя контейнера

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Скачиваем исходный код
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Настраиваем Java и кэшируем зависимости Maven
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      # 3. Собираем приложение с Maven
      - name: Build with Maven
        run: mvn clean package -DskipTests

      # 4. Собираем Docker-образ
      - name: Build Docker image
        run: docker build -t ${{ env.DOCKER_IMAGE_NAME }} .

      # 5. Сохраняем образ в .tar архив
      - name: Save Docker image to a tarball
        run: docker save ${{ env.DOCKER_IMAGE_NAME }} -o ${{ env.DOCKER_IMAGE_NAME }}.tar

      # 6. Устанавливаем и настраиваем SSH-клиент
      # Этот способ с SSH-ключом намного безопаснее, чем sshpass!
      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: 'just-a-placeholder-so-we-dont-get-errors'

      - name: Adding known_hosts
        run: ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      # 7. Деплой на сервер
      - name: Deploy to Server
        run: |
          # Создаем директорию на сервере, если она не существует
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "mkdir -p ${{ env.DEPLOY_DIR }}"

          # Копируем .tar архив и docker-compose.yml на сервер
          scp ${{ env.DOCKER_IMAGE_NAME }}.tar docker-compose.yml ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:${{ env.DEPLOY_DIR }}

          # Копируем .env файл с секретами
          # Важно: .env файл должен быть создан в репозитории и его содержимое заполнено из секретов GitHub
          echo "BRASS_DATASOURCE_URL=${{ secrets.BRASS_DATASOURCE_URL }}" > .env
          echo "BRASS_DATASOURCE_USERNAME=${{ secrets.BRASS_DATASOURCE_USERNAME }}" >> .env
          echo "BRASS_DATASOURCE_PASSWORD=${{ secrets.BRASS_DATASOURCE_PASSWORD }}" >> .env
          echo "BRASS_ACCESS_SECRET=${{ secrets.BRASS_ACCESS_SECRET }}" >> .env
          scp .env ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:${{ env.DEPLOY_DIR }}

          # Выполняем команды на удаленном сервере
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} '
            cd ${{ env.DEPLOY_DIR }} && \
          
            # Загружаем новый образ из архива
            docker load -i ${{ env.DOCKER_IMAGE_NAME }}.tar && \
          
            # Запускаем docker-compose
            # Он автоматически остановит и пересоздаст контейнер, если образ изменился
            docker-compose up -d && \
          
            # Очищаем старые, неиспользуемые образы Docker
            docker image prune -af
          '